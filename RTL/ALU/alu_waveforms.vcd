$date
	Wed May 28 01:36:59 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! zero_flag_tb $end
$var wire 32 " result_tb [31:0] $end
$var wire 1 # overflow_flag_tb $end
$var wire 1 $ negative_flag_tb $end
$var wire 1 % carry_flag_tb $end
$var reg 4 & alu_op_tb [3:0] $end
$var reg 32 ' operand1_tb [31:0] $end
$var reg 32 ( operand2_tb [31:0] $end
$scope function op_code_to_string $end
$upscope $end
$scope module alu_instance $end
$var wire 4 ) alu_op [3:0] $end
$var wire 32 * operand1 [31:0] $end
$var wire 32 + operand2 [31:0] $end
$var wire 1 ! zero_flag $end
$var wire 1 $ negative_flag $end
$var reg 1 % carry_flag $end
$var reg 1 # overflow_flag $end
$var reg 32 , result [31:0] $end
$upscope $end
$scope task apply_and_check $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
0%
x$
0#
bx "
x!
$end
#10000
0$
0!
b11 "
b11 ,
b0 &
b0 )
b10 (
b10 +
b1 '
b1 *
#30000
b1 &
b1 )
b101 '
b101 *
#50000
b1010 "
b1010 ,
b10 &
b10 )
b1010 (
b1010 +
b1111 '
b1111 *
#70000
b1111 "
b1111 ,
b11 &
b11 )
#90000
b101 "
b101 ,
b100 &
b100 )
#110000
b111100 "
b111100 ,
b101 &
b101 )
b10 (
b10 +
#130000
b11 "
b11 ,
b110 &
b110 )
#150000
b111100 "
b111100 ,
b111 &
b111 )
b11110000 '
b11110000 *
#170000
1$
b11111111111111111111111111111100 "
b11111111111111111111111111111100 ,
b11111111111111111111111111110000 '
b11111111111111111111111111110000 *
#190000
0$
1%
1!
b0 "
b0 ,
b0 &
b0 )
b1 (
b1 +
b11111111111111111111111111111111 '
b11111111111111111111111111111111 *
#210000
1$
1#
0!
b10000000000000000000000000000000 "
b10000000000000000000000000000000 ,
0%
b1111111111111111111111111111111 '
b1111111111111111111111111111111 *
#230000
0$
1%
1!
b0 "
b0 ,
1#
b10000000000000000000000000000000 (
b10000000000000000000000000000000 +
b10000000000000000000000000000000 '
b10000000000000000000000000000000 *
#250000
1$
0!
b11111111111111111111111111111101 "
b11111111111111111111111111111101 ,
0#
1%
b1 &
b1 )
b101 (
b101 +
b10 '
b10 *
#270000
1#
b11100000000000000000000000000000 "
b11100000000000000000000000000000 ,
1%
b10010000000000000000000000000000 (
b10010000000000000000000000000000 +
b1110000000000000000000000000000 '
b1110000000000000000000000000000 *
#290000
0$
b100000000000000000000000000000 "
b100000000000000000000000000000 ,
1#
0%
b1110000000000000000000000000000 (
b1110000000000000000000000000000 +
b10010000000000000000000000000000 '
b10010000000000000000000000000000 *
#310000
1$
b10101011110011011110111100010010 "
b10101011110011011110111100010010 ,
0#
b101 &
b101 )
b0 (
b0 +
b10101011110011011110111100010010 '
b10101011110011011110111100010010 *
#330000
b10000000000000000000000000000000 "
b10000000000000000000000000000000 ,
b11111 (
b11111 +
b1 '
b1 *
#350000
0$
b100 "
b100 ,
b100010 (
b100010 +
#370000
x$
x!
bx "
bx ,
b1111 &
b1111 )
b101 (
b101 +
b1010 '
b1010 *
#380000
