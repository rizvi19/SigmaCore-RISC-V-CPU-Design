$date
	Sun Mar 30 02:13:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! zero_flag $end
$var wire 32 " result [31:0] $end
$var wire 1 # overflow_flag $end
$var wire 1 $ negative_flag $end
$var wire 1 % carry_flag $end
$var reg 4 & alu_op [3:0] $end
$var reg 32 ' operand1 [31:0] $end
$var reg 32 ( operand2 [31:0] $end
$scope module alu_inst $end
$var wire 4 ) alu_op [3:0] $end
$var wire 32 * operand1 [31:0] $end
$var wire 32 + operand2 [31:0] $end
$var wire 1 ! zero_flag $end
$var wire 1 $ negative_flag $end
$var reg 1 % carry_flag $end
$var reg 1 # overflow_flag $end
$var reg 32 , result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b11 ,
b10 +
b1 *
b0 )
b10 (
b1 '
b0 &
0%
0$
x#
b11 "
0!
$end
#10000
b1 &
b1 )
b101 '
b101 *
#20000
b1010 "
b1010 ,
b10 &
b10 )
b1010 (
b1010 +
b1111 '
b1111 *
#30000
b1111 "
b1111 ,
b11 &
b11 )
#40000
b101 "
b101 ,
b100 &
b100 )
#50000
b111100 "
b111100 ,
b101 &
b101 )
b10 (
b10 +
#60000
b11 "
b11 ,
b110 &
b110 )
#70000
1$
b11100000000000000000000000000000 "
b11100000000000000000000000000000 ,
b111 &
b111 )
b10000000000000000000000000000000 '
b10000000000000000000000000000000 *
#80000
